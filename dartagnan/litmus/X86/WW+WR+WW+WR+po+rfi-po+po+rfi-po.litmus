X86 WW+WR+WW+WR+po+rfi-po+po+rfi-po
"PodWW Wse Rfi PodRR Fre PodWW Wse Rfi PodRR Fre"
Cycle=Rfi PodRR Fre PodWW Wse Rfi PodRR Fre PodWW Wse
Relax=
Safe=[Rfi,PodRR] Fre Wse PodWW
Prefetch=0:x=F,0:y=W,1:y=F,1:z=T,2:z=F,2:a=W,3:a=F,3:x=T
Com=Ws Fr Ws Fr
Orig=PodWW Wse Rfi PodRR Fre PodWW Wse Rfi PodRR Fre
{
}
 P0         | P1          | P2         | P3          ;
 MOV [x],$1 | MOV [y],$2  | MOV [z],$1 | MOV [a],$2  ;
 MOV [y],$1 | MOV EAX,[y] | MOV [a],$1 | MOV EAX,[a] ;
            | MOV EBX,[z] |            | MOV EBX,[x] ;
forall 1:EAX=2 /\ (3:EAX=2 /\ (1:EBX=0 /\ (3:EBX=0 /\ (a=1 /\ (y=2 \/ y=1) \/ a=2 /\ (y=1 \/ y=2)) \/ 3:EBX=1 /\ (a=1 /\ (y=1 \/ y=2) \/ a=2 /\ (y=2 \/ y=1))) \/ 1:EBX=1 /\ (3:EBX=0 /\ (a=1 /\ (y=1 \/ y=2) \/ a=2 /\ (y=2 \/ y=1)) \/ 3:EBX=1 /\ (a=1 /\ (y=2 \/ y=1) \/ a=2 /\ (y=1 \/ y=2)))) \/ 3:EAX=1 /\ a=1 /\ (1:EBX=0 /\ (3:EBX=0 /\ (y=1 \/ y=2) \/ 3:EBX=1 /\ (y=2 \/ y=1)) \/ 1:EBX=1 /\ (3:EBX=0 /\ (y=2 \/ y=1) \/ 3:EBX=1 /\ (y=1 \/ y=2)))) \/ 1:EAX=1 /\ y=1 /\ (3:EAX=2 /\ (1:EBX=0 /\ (3:EBX=0 /\ (a=1 \/ a=2) \/ 3:EBX=1 /\ (a=2 \/ a=1)) \/ 1:EBX=1 /\ (3:EBX=0 /\ (a=2 \/ a=1) \/ 3:EBX=1 /\ (a=1 \/ a=2))) \/ 3:EAX=1 /\ a=1 /\ (1:EBX=1 /\ (3:EBX=1 \/ 3:EBX=0) \/ 1:EBX=0 /\ 3:EBX=1))
