X86 W+RR+WW+WR+po+po+rfi-po
"Rfe PodRR Fre PodWW Wse Rfi PodRR Fre"
Cycle=Rfi PodRR Fre Rfe PodRR Fre PodWW Wse
Relax=
Safe=[Rfi,PodRR] Rfe Fre Wse PodWW PodRR
Prefetch=1:x=F,1:y=T,2:y=F,2:z=W,3:z=F,3:x=T
Com=Rf Fr Ws Fr
Orig=Rfe PodRR Fre PodWW Wse Rfi PodRR Fre
{
}
 P0         | P1          | P2         | P3          ;
 MOV [x],$1 | MOV EAX,[x] | MOV [y],$1 | MOV [z],$2  ;
            | MOV EBX,[y] | MOV [z],$1 | MOV EAX,[z] ;
            |             |            | MOV EBX,[x] ;
forall 3:EAX=2 /\ (1:EAX=0 /\ (1:EBX=0 /\ (3:EBX=0 /\ (z=1 \/ z=2) \/ 3:EBX=1 /\ (z=2 \/ z=1)) \/ 1:EBX=1 /\ (3:EBX=0 /\ (z=2 \/ z=1) \/ 3:EBX=1 /\ (z=1 \/ z=2))) \/ 1:EAX=1 /\ (1:EBX=0 /\ (3:EBX=0 /\ (z=2 \/ z=1) \/ 3:EBX=1 /\ (z=1 \/ z=2)) \/ 1:EBX=1 /\ (3:EBX=0 /\ (z=1 \/ z=2) \/ 3:EBX=1 /\ (z=2 \/ z=1)))) \/ 3:EAX=1 /\ z=1 /\ (1:EAX=0 /\ (1:EBX=0 /\ (3:EBX=1 \/ 3:EBX=0) \/ 1:EBX=1 /\ (3:EBX=0 \/ 3:EBX=1)) \/ 1:EAX=1 /\ (1:EBX=1 /\ (3:EBX=0 \/ 3:EBX=1) \/ 1:EBX=0 /\ 3:EBX=1))
