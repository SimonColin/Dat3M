X86 WW+RW+WR+WR+po+po+rfi-po+po
"PodWW Rfe PodRW Wse Rfi PodRR Fre PodWR Fre"
Cycle=Rfi PodRR Fre PodWR Fre PodWW Rfe PodRW Wse
Relax=
Safe=[Rfi,PodRR] Rfe Fre Wse PodWW PodWR PodRW
Prefetch=0:x=F,0:y=W,1:y=F,1:z=W,2:z=F,2:a=T,3:a=F,3:x=T
Com=Rf Ws Fr Fr
Orig=PodWW Rfe PodRW Wse Rfi PodRR Fre PodWR Fre
{
}
 P0         | P1          | P2          | P3          ;
 MOV [x],$1 | MOV EAX,[y] | MOV [z],$2  | MOV [a],$1  ;
 MOV [y],$1 | MOV [z],$1  | MOV EAX,[z] | MOV EAX,[x] ;
            |             | MOV EBX,[a] |             ;
forall 2:EAX=2 /\ (1:EAX=0 /\ (2:EBX=0 /\ (3:EAX=0 /\ (z=1 \/ z=2) \/ 3:EAX=1 /\ (z=2 \/ z=1)) \/ 2:EBX=1 /\ (3:EAX=0 /\ (z=2 \/ z=1) \/ 3:EAX=1 /\ (z=1 \/ z=2))) \/ 1:EAX=1 /\ (2:EBX=0 /\ (3:EAX=0 /\ (z=2 \/ z=1) \/ 3:EAX=1 /\ (z=1 \/ z=2)) \/ 2:EBX=1 /\ (3:EAX=0 /\ (z=1 \/ z=2) \/ 3:EAX=1 /\ (z=2 \/ z=1)))) \/ 2:EAX=1 /\ z=1 /\ (1:EAX=0 /\ (2:EBX=0 /\ (3:EAX=1 \/ 3:EAX=0) \/ 2:EBX=1 /\ (3:EAX=0 \/ 3:EAX=1)) \/ 1:EAX=1 /\ (2:EBX=0 /\ (3:EAX=0 \/ 3:EAX=1) \/ 2:EBX=1 /\ (3:EAX=1 \/ 3:EAX=0)))
